package ru.bmstu.iu9.bioinf.commons;

import java.util.*;

public class Consts {
    public static final Map<String, Character> CODON_2_AMINO_ACID = new HashMap<String, Character>()
    {{
        put("ATT", 'I');        put("ATC", 'I');       put("ATA", 'I');        put("CTT", 'L');        put("CTC", 'L');
        put("CTA", 'L');        put("CTG", 'L');       put("TTA", 'L');        put("TTG", 'L');        put("GTT", 'V');
        put("GTC", 'V');        put("GTA", 'V');       put("GTG", 'V');        put("TTT", 'F');        put("TTC", 'F');
        put("ATG", 'M');        put("TGT", 'C');       put("TGC", 'C');        put("GCT", 'A');        put("GCC", 'A');
        put("GCA", 'A');        put("GCG", 'A');       put("GGT", 'G');        put("GGC", 'G');        put("GGA", 'G');
        put("GGG", 'G');        put("CCT", 'P');       put("CCC", 'P');        put("CCA", 'P');        put("CCG", 'P');
        put("ACT", 'T');        put("ACC", 'T');       put("ACA", 'T');        put("ACG", 'T');        put("TCT", 'S');
        put("TCC", 'S');        put("TCA", 'S');       put("TCG", 'S');        put("AGT", 'S');        put("AGC", 'S');
        put("TAT", 'Y');        put("TAC", 'Y');       put("TGG", 'W');        put("CAA", 'Q');        put("CAG", 'Q');
        put("AAT", 'N');        put("AAC", 'N');       put("CAT", 'H');        put("CAC", 'H');        put("GAA", 'E');
        put("GAG", 'E');        put("GAT", 'D');       put("GAC", 'D');        put("AAA", 'K');        put("AAG", 'K');
        put("CGT", 'R');        put("CGC", 'R');       put("CGA", 'R');        put("CGG", 'R');        put("AGA", 'R');
        put("AGG", 'R');        put("TAA", '#');       put("TAG", '#');        put("TGA", '#');
    }};

    public static final String[] NUCLEOTIDES = {"A", "T", "C", "G"};

    private static final char[] AMINO_ACIDS = {
            'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'B', 'Z', 'X'
    };

    public static final int[][] BLOSUM62_MATRIX = {
/*         A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *       */
/* A */  { 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1,  0, -4},
/* R */  {-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1,  0, -1, -4},
/* N */  {-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4},
/* D */  {-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1, -4},
/* C */  { 0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4},
/* Q */  {-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4},
/* E */  {-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4},
/* G */  { 0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4},
/* H */  {-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4},
/* I */  {-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4},
/* L */  {-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4},
/* K */  {-1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4},
/* M */  {-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3, -1, -1, -4},
/* F */  {-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4},
/* P */  {-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4},
/* S */  { 1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0,  0,  0, -4},
/* T */  { 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1,  0, -4},
/* W */  {-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4},
/* Y */  {-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4},
/* V */  { 0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3, -2, -1, -4},
/* B */  {-2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4},
/* Z */  {-1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4},
/* X */  { 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4},
/* * */  {-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1},
    };

    public static final Map<Character, Integer> AMINO_ACID_2_IDX = new HashMap<>();
    static {
        for (int i = 0; i < AMINO_ACIDS.length; i++) {
            AMINO_ACID_2_IDX.put(AMINO_ACIDS[i], i);
        }
    }
}
